---
title: "Unidad 8 ‚Äî An√°lisis de Canasta de Mercado"
subtitle: "Semana 12: Reglas de Asociaci√≥n"
author: "Eduard F. Mart√≠nez Gonz√°lez"
---

<a href="mailto:efmartinez@icesi.edu.co" style="color:black;">
<img src="pic/correo.png" alt="Email" width="20" height="20"/> efmartinez@icesi.edu.co
</a>

<a href="https://github.com/eduard-martinez" style="color:black;"> <img src="pic/github.png" alt="Qries" width="20" height="20"/> eduard-martinez</a>

<a href="https://twitter.com/emartigo" style="color:black;"> <img src="pic/twitter.jpg" alt="Qries" width="20" height="20"/> @emartigo</a>

<a href="https://eduard-martinez.github.io" style="color:black;"> <img src="pic/link.png" alt="Qries" width="20" height="20"/> https://eduard-martinez.github.io</a>

# An√°lisis de Canasta de Mercado

El **an√°lisis de canasta de mercado** (Market Basket Analysis) es un conjunto de t√©cnicas de **miner√≠a de datos** utilizadas para descubrir asociaciones entre productos comprados por los clientes.  

Es una herramienta fundamental en **retail analytics**, ya que permite a los minoristas identificar patrones de consumo, mejorar la disposici√≥n de productos, dise√±ar promociones cruzadas y aumentar las ventas.

## Conceptos clave

Este an√°lisis pertenece a la tarea de **asociaci√≥n**, un tipo de **aprendizaje no supervisado** que busca identificar **patrones frecuentes de co-ocurrencia** entre √≠tems dentro de transacciones (tambi√©n conocidas como *tirillas de compra* o *tickets de venta*).

- **Antecedente:** producto o conjunto de productos que provocan la compra de otros. Ejemplo: `{Leche} ‚Üí {Pan}`  

  ‚Üí Si un cliente compra leche, es probable que tambi√©n compre pan. 

- **Consecuente:** producto que resulta asociado al antecedente.  
  En el ejemplo anterior, el *pan* es el consecuente.

## Aplicaciones t√≠picas

- **Comercio minorista:** identificar productos que se venden juntos (leche y cereales).  
- **Marketing digital:** recomendaciones tipo ‚Äúlos clientes que compraron este producto tambi√©n compraron‚Ä¶‚Äù.  
- **Bancos:** detecci√≥n de co-uso de productos financieros (cuenta de ahorros + tarjeta).  
- **Streaming:** recomendaci√≥n de contenidos seg√∫n consumo conjunto.

# Aplicaci√≥n en R

Para ilustrar el **an√°lisis de canasta de mercado**, trabajaremos con un conjunto de transacciones que representa las **compras realizadas por los clientes de un supermercado** durante un periodo determinado.  
Cada transacci√≥n contiene uno o m√°s productos adquiridos en la misma compra, lo que nos permitir√° identificar **patrones de asociaci√≥n** entre ellos.

En este contexto:

- Cada **√≠tem** corresponde a un producto individual.  
- Cada **transacci√≥n** agrupa los productos comprados por un mismo cliente.  
- El objetivo es descubrir **reglas del tipo**:  
  `{Leche} ‚Üí {Pan}`  e interpreta como:  
  *‚ÄúLos clientes que compran leche y pan tienden tambi√©n a comprar mantequilla.‚Äù*

A partir de este ejercicio podremos responder preguntas como:

- ¬øQu√© productos suelen comprarse juntos con mayor frecuencia?  
- ¬øQu√© asociaciones son m√°s fuertes en t√©rminos de confianza y soporte?  
- ¬øQu√© reglas podr√≠an usarse para dise√±ar promociones o estrategias de recomendaci√≥n?

Este tipo de an√°lisis tiene m√∫ltiples aplicaciones pr√°cticas en **marketing, retail y comportamiento del consumidor**, y se basa en los mismos principios de aprendizaje no supervisado que utilizamos en t√©cnicas como clustering o an√°lisis de redes.

::: callout-tip
üí° **C√≥mo usar este material:**  
Puedes ejecutar los _chunks_ de R directamente en el navegador gracias a **webR**, sin necesidad de instalar nada localmente.
:::

## Preparaci√≥n del entorno

El prop√≥sito de este bloque es asegurar un entorno **limpio, reproducible y funcional** antes de iniciar el an√°lisis. Primero, eliminamos cualquier objeto previo que pueda interferir con la sesi√≥n actual. Luego, instalamos (si es necesario) y cargamos los paquetes requeridos para la **manipulaci√≥n de datos**, la **construcci√≥n de transacciones** y la **generaci√≥n de reglas de asociaci√≥n**. Con esto, dejamos el entorno preparado para comenzar el an√°lisis de canasta de mercado.

```{webr-r}
## Limpiar el entorno de trabajo
rm(list = ls())

## instalar
install.packages("arules")
install.packages("arulesViz")

## Cargar paquetes
library(tidyverse)   # Manipulaci√≥n y transformaci√≥n de datos
library(arules)      # Construcci√≥n y an√°lisis de redes
library(arulesViz)      # Visualizaci√≥n avanzada de grafos

## Fijar semilla para reproducibilidad
set.seed(123)
```
::: callout-note
Los paquetes `arules` y `arulesViz` pertenecen al ecosistema de data mining en R.
	‚Ä¢	`arules` permite aplicar el algoritmo Apriori, que identifica combinaciones frecuentes de productos.
	‚Ä¢	`arulesViz` facilita la visualizaci√≥n interactiva de las reglas y sus m√©tricas (soporte, confianza y lift).
:::

## Ingesta de datos 

En esta secci√≥n realizamos la **ingesta de datos**, es decir, el proceso de cargar o generar la base que utilizaremos para construir la **canasta de mercado**. Cada registro representa una **transacci√≥n individual**, es decir, el conjunto de productos que un cliente compr√≥ en una misma visita al supermercado. Nuestro objetivo ser√° analizar estos datos para descubrir **patrones de compra conjunta** y **reglas de asociaci√≥n** entre productos.

La estructura de datos es la siguiente:

- Cada **√≠tem** corresponde a un producto (por ejemplo: *Leche*, *Pan*, *Huevos*).  
- Cada **transacci√≥n** es una lista de productos comprados juntos.  

- El **conjunto de todas las transacciones** conforma la base que usaremos para aplicar el algoritmo *Apriori* y encontrar asociaciones significativas.

```{webr-r}
#| warning: false
#| message: false

## generar los datos
source("https://raw.githubusercontent.com/ba-in-r/01-slides/main/week-12/data/week-12.r")

## chuequear objeto
ventas[1:5]
```

**Interpretaci√≥n:** Cada elemento de la lista ventas representa una compra √∫nica: un conjunto de productos adquiridos por un cliente. Por ejemplo:

Esto significa que:

	‚Ä¢	En la transacci√≥n 1, el cliente compr√≥ mantequilla, pan, queso y verduras. 
	‚Ä¢	En la transacci√≥n 2, compr√≥ cereal, queso, leche, pan, mantequilla y huevos.

Esta estructura servir√° como punto de partida para convertir las listas en objetos transaccionales y aplicar el algoritmo Apriori, que nos permitir√° descubrir qu√© productos se compran juntos con mayor frecuencia.

## Conversi√≥n al formato transaccional

Antes de aplicar t√©cnicas de an√°lisis de cesta de mercado, es fundamental que los datos se encuentren en un formato adecuado para este tipo de estudio. En particular, los algoritmos de reglas de asociaci√≥n, como Apriori o Eclat, requieren que la informaci√≥n est√© organizada en formato transaccional, donde cada observaci√≥n representa una transacci√≥n individual y contiene el conjunto de √≠tems comprados conjuntamente.

Para lograr esto, se deben agrupar los productos por el identificador de la transacci√≥n (ID), de modo que cada registro muestre la lista de art√≠culos adquiridos en una misma compra o canasta. En R, esta conversi√≥n puede realizarse f√°cilmente utilizando la funci√≥n split(), que permite crear una lista de √≠tems por transacci√≥n. Posteriormente, dicha lista se transforma en un objeto de clase transactions, el cual es compatible con los paquetes de an√°lisis de asociaciones como arules.

A continuaci√≥n, verificamos la estructura del objeto `ventas` para conocer su tipo de datos y asegurarnos de que puede convertirse correctamente al formato transaccional. 

```{webr-r}
## class
class(ventas)
```
::: callout-note
En este caso, el objeto se presenta como una lista, lo que significa que cada elemento ya corresponde a una transacci√≥n (es decir, un conjunto de √≠tems comprados juntos). Por tanto, no es necesario aplicar la funci√≥n split(), ya que los datos ya est√°n organizados en el formato requerido.
:::

Una vez confirmada la estructura de los datos, procedemos a convertir el objeto ventas al formato transactions utilizando la funci√≥n `as()` del paquete `arules.`
Este paso es esencial, ya que permite representar cada lista de productos como una transacci√≥n individual dentro de un objeto especializado que puede ser interpretado por los algoritmos de reglas de asociaci√≥n.

```{webr-r}
## Conversi√≥n directa de la lista al formato transaccional
transa <- as(ventas, "transactions")

## print
print("Listo!")
```

Posteriormente, se realiza una exploraci√≥n inicial para verificar que la conversi√≥n fue exitosa y comprender las caracter√≠sticas b√°sicas del conjunto de `transa`, como el n√∫mero total de √≠tems y transacciones.

```{webr-r}
## Resumen del objeto transaccional
summary(transa)
```

El resumen muestra que el conjunto de datos contiene `100` transacciones y `10` productos √∫nicos, almacenados en una matriz dispersa (sparse matrix). La densidad de `0.401` indica que, en promedio, cada compra incluye unos cuatro productos, lo cual coincide con la distribuci√≥n de tama√±os de las canastas. Los √≠tems m√°s frecuentes son `Az√∫car`, `Caf√©`, `Cereal`, `Frutas` y `Mantequilla`, que aparecen en la mayor√≠a de las transacciones y probablemente formar√°n parte de las reglas m√°s relevantes en el an√°lisis posterior.

Una vez confirmada la estructura del objeto, inspeccionamos las primeras transacciones para observar c√≥mo est√°n representadas internamente dentro del formato `transactions.`

```{webr-r}
## Visualizar las primeras transacciones
inspect(head(transa, 5))
```

## Reglas de asociaci√≥n

Con el objeto `transa` ya creado, podemos comenzar a descubrir patrones de compra aplicando la funci√≥n `apriori()` del paquete `arules`. Este algoritmo busca relaciones del tipo:

`{Producto A, Producto B} => {Producto C}`

que nos permiten identificar qu√© productos tienden a comprarse juntos dentro de las transacciones.

**Estructura de una regla:**

- **LHS (Left Hand Side)** ‚Üí *Antecedente*: conjunto de productos que originan o influyen en la compra de otros.  

- **RHS (Right Hand Side)** ‚Üí *Consecuente*: producto asociado al antecedente, es decir, el que se compra despu√©s o junto.

Ejemplo: `{Leche, Pan} => {Mantequilla}`  

::: callout-note
**Interpretaci√≥n:** Los clientes que compran *Leche* y *Pan* tienden tambi√©n a comprar *Mantequilla*. Esto sugiere una oportunidad de *promoci√≥n cruzada* o de *dise√±o estrat√©gico de g√≥ndolas*.
:::

### M√©tricas principales

**Soporte (Support):** Mide la frecuencia con que aparece un conjunto de √≠tems en todas las transacciones: $$supp(Y) = \frac{freq(Y)}{N}$$

Donde: $freq(Y)$ es el n√∫mero de transacciones que contienen el conjunto $Y$ y $N$ es el n√∫mero total de transacciones.

**Confianza (Confidence):** Mide la probabilidad de que el consecuente (RHS) sea comprado dado que el antecedente (LHS) fue comprado:

$$conf(A \Rightarrow B) = \frac{supp(A \cup B)}{supp(A)}$$

**Cobertura (Coverage):** N√∫mero de veces que aparece el **antecedente (LHS)** en las transacciones.  Representa el soporte del √≠tem que origina la regla.

**Lift (Elevaci√≥n):** Eval√∫a la fuerza de la relaci√≥n entre productos, comparando la frecuencia observada con la esperada si fueran independientes:

$$lift(A \Rightarrow B) = \frac{conf(A \Rightarrow B)}{supp(B)}$$

::: callout-note
**Interpretaci√≥n:** $lift > 1$: asociaci√≥n positiva (la compra de A aumenta la probabilidad de comprar B). $lift = 1$: independencia. $lift < 1$: asociaci√≥n negativa (la compra de A reduce la probabilidad de comprar B).
:::

**Count:** N√∫mero total de transacciones que cumplen la regla. 

### Obtener las m√©tricas

La funci√≥n `apriori()` utiliza una lista de par√°metros para controlar c√≥mo se generan las reglas. Estos par√°metros se definen dentro de `parameter = list()`.

**Support:** Umbral m√≠nimo de soporte. Es la proporci√≥n m√≠nima de transacciones en las que debe aparecer una combinaci√≥n de productos. `supp = 0.1` solo se considerar√°n combinaciones de productos que aparezcan en al menos 10 % de las transacciones (en este caso, 10 de las 100 compras).

**Confidence:** Nivel m√≠nimo de confianza. Es la probabilidad de que el consecuente ocurra dado el antecedente. `conf = 0.3` las reglas deben cumplirse al menos en el 30 % de los casos en que se cumple el antecedente.

**Minimum length:** Longitud m√≠nima de la regla (n√∫mero de √≠tems involucrados). `minlen = 2` evita reglas triviales con un solo producto, asegurando que las reglas tengan al menos un antecedente y un consecuente.

```{webr-r}
## Generar reglas de asociaci√≥n
reglas <- apriori(transa,
                  parameter = list(supp=0.1 , conf=0.3 , minlen=2))
```
Este objeto (reglas) contiene:

	‚Ä¢	Los √≠tems involucrados.
	‚Ä¢	Las m√©tricas (support, confidence, lift, count, etc.).
	‚Ä¢	El formato necesario para exploraci√≥n y visualizaci√≥n.

Este resultado significa que:

	‚Ä¢	El algoritmo analiz√≥ 100 compras que incluyen 10 productos diferentes.
	‚Ä¢	Aplic√≥ los filtros definidos (soporte ‚â• 0.1, confianza ‚â• 0.3).
	‚Ä¢	Encontr√≥ 110 combinaciones de productos que cumplen esas condiciones.

### Generaci√≥n de reglas m√°s s√≥lidas

En este paso ajustamos los par√°metros del algoritmo *Apriori* para obtener *reglas de asociaci√≥n m√°s precisas*, es decir, aquellas que representan relaciones fuertes y consistentes entre productos.

```{webr-r}
## Generar reglas de asociaci√≥n
reglas <- apriori(transa,
                  parameter = list(supp=0.1 , conf=0.55 , minlen=2))
```
| Concepto | Valor | Interpretaci√≥n |
|-----------|--------|----------------|
| **N√∫mero de reglas encontradas** | 3 | Solo 3 asociaciones cumplen simult√°neamente los criterios de soporte ‚â• 0.1 y confianza ‚â• 0.6. |
| **Soporte m√≠nimo (`supp = 0.1`)** | 10 transacciones | Una combinaci√≥n debe aparecer en al menos 10 de las 100 compras. |
| **Confianza m√≠nima (`conf = 0.55`)** | 55 % | Solo se conservan reglas que predicen el consecuente con al menos un 55 % de probabilidad. |
| **Longitud m√≠nima (`minlen = 2`)** | 2 productos | Cada regla debe tener al menos un antecedente y un consecuente. |

**¬øPor qu√© ahora hay menos reglas?:** El algoritmo *filtra m√°s agresivamente* las combinaciones de productos: Las asociaciones d√©biles (con confianza < 0.6) fueron eliminadas. En otras palabras: Ahora el modelo solo muestra relaciones que ocurren con alta probabilidad cuando se cumple el antecedente.

```{webr-r}
## Inspeccionar las primeras reglas
inspect(head(reglas))
```

`{Frutas} ‚áí {Az√∫car}`  

- Aparece en el **23 %** de las compras, lo que la convierte en una de las asociaciones m√°s frecuentes.  
- En el **57.5 %** de las ocasiones en que los clientes compran *Frutas*, tambi√©n adquieren *Az√∫car*.  
- Con un **lift = 1.25**, la relaci√≥n es **positiva pero moderada**: ocurre un 25 % m√°s de lo esperado si las compras fueran independientes.  

`{Mantequilla, Verduras} ‚áí {Queso}`  

- Ocurre en el **10 %** de las transacciones.  
- En el **58.8 %** de las veces que los clientes compran *Mantequilla* y *Verduras*, tambi√©n se llevan *Queso*.  
- El **lift = 1.47** indica una **asociaci√≥n positiva clara**, aunque no extremadamente fuerte.  

`{Frutas, Queso} ‚áí {Az√∫car}`  

- Aparece en el **11 %** de las transacciones.  
- En casi el **58 %** de los casos donde se compran *Frutas* y *Queso*, tambi√©n se incluye *Az√∫car*.  
- Con un **lift = 1.26**, la asociaci√≥n es **ligeramente superior a lo esperado por azar**.  
	
### Reglas redundantes

Al generar reglas de asociaci√≥n con `apriori()`, es com√∫n que aparezcan **reglas redundantes**, es decir, reglas que **no aportan nueva informaci√≥n** porque describen un patr√≥n ya representado por otra m√°s general o equivalente.

Por ejemplo:  

- `{Frutas, Az√∫car} ‚áí {Queso}`  
- `{Frutas, Az√∫car, Mantequilla} ‚áí {Queso}`  

La segunda regla incluye la primera dentro de su antecedente, pero no mejora las m√©tricas (soporte, confianza, lift).  
En estos casos, la segunda es **redundante** y puede eliminarse.

**Identificaci√≥n de reglas redundantes:** Podemos detectar y visualizar qu√© reglas son redundantes usando la funci√≥n `is.redundant()`:

```{webr-r}
## Identificar reglas redundantes
reglas.reduntantes <- is.redundant(reglas)

## Mostrar las reglas redundantes detectadas
inspect(reglas[reglas.reduntantes])
```

Una vez identificadas, eliminamos las redundantes y conservamos √∫nicamente las reglas m√°s informativas:
	  
```{webr-r}
## Eliminar reglas redundantes
reglas <- reglas[!reglas.reduntantes]
inspect(reglas)
```

Ahora reglas contiene solo las reglas no redundantes, lo que mejora la claridad del an√°lisis y evita repeticiones.

### Plotear las reglas

Una vez generadas las reglas y revisadas sus m√©tricas, es √∫til *visualizar los resultados* para identificar r√°pidamente *qu√© asociaciones son m√°s fuertes y frecuentes*.  

El paquete *arulesViz* permite crear distintos tipos de gr√°ficos interactivos.  
En este caso, utilizaremos un *diagrama de dispersi√≥n (scatterplot)* que representa cada regla en funci√≥n de sus medidas principales:

- **Eje X:** Soporte (frecuencia con que ocurre la regla).  
- **Eje Y:** Confianza (probabilidad de que ocurra el consecuente).  
- **Color (sombreado):** Valor del *lift*, que mide la fuerza de la asociaci√≥n.

De esta forma, podremos observar visualmente *qu√© reglas combinan alta frecuencia, alta confianza y alta fuerza de relaci√≥n*.

```{webr-r}
## Ver resumen de reglas
plot(reglas, measure = c("support", "confidence"), shading = "lift")
```

# Actividad en Clase

## Instrucciones:

1. Ejecute los *chunks* de c√≥digo proporcionados en R (puede hacerlo directamente en el navegador o en RStudio).
2. Observe los resultados obtenidos, especialmente las reglas de asociaci√≥n generadas y sus m√©tricas (soporte, confianza y lift).
3. Genere un documento en **Word (.docx)** donde:
   - Copie las preguntas que aparecen a continuaci√≥n.
   - Redacte sus interpretaciones y conclusiones con base en los resultados.
   - **No copie el c√≥digo ni las tablas**, solo redacte sus respuestas.
4. Suba su documento a la plataforma **Intu**.

```{webr-r}
## Cargar datos
source("https://raw.githubusercontent.com/ba-in-r/01-slides/main/week-12/data/week-12.r")

## Crear objeto transaccional
transa <- as(ventas, "transactions")

## Generar reglas de asociaci√≥n con umbrales iniciales
reglas <- apriori(transa,
                  parameter = list(supp = 0.10, conf = 0.55, minlen = 2))

## Inspeccionar las primeras reglas encontradas
inspect(head(reglas))
```

## Preguntas de interpretaci√≥n:

### Interpretaci√≥n de resultados: Con base en las primeras reglas obtenidas mediante el c√≥digo anterior:
	‚Ä¢	¬øCu√°l de las reglas observadas consideras m√°s relevante para el supermercado y por qu√©?
	‚Ä¢	Interpreta en tus propias palabras la siguiente regla: `{Frutas} ‚áí {Az√∫car}`
	‚Ä¢	¬øQu√© nos dice sobre el comportamiento del consumidor?
	‚Ä¢	¬øC√≥mo podr√≠as aprovechar esta informaci√≥n para proponer una promoci√≥n o disposici√≥n de g√≥ndolas?

### Evaluaci√≥n de la fuerza de asociaci√≥n:
	‚Ä¢	La regla {Mantequilla, Verduras} ‚áí {Queso} tiene una confianza del 0.588 y un lift de 1.47.
	‚Ä¢	¬øC√≥mo interpretar√≠as esta relaci√≥n?
	‚Ä¢	¬øQu√© tan fuerte consideras la asociaci√≥n?
	‚Ä¢	¬øQu√© acci√≥n comercial podr√≠a sugerirse?

### An√°lisis cr√≠tico:
	‚Ä¢	Si el an√°lisis se basara √∫nicamente en datos de un mes de ventas, ¬øqu√© limitaciones tendr√≠a la interpretaci√≥n?
	‚Ä¢	¬øQu√© otros factores o variables te gustar√≠a incluir para obtener reglas m√°s informativas (por ejemplo, tipo de cliente, d√≠a de la semana, temporada)?
	‚Ä¢	Menciona un caso fuera del comercio minorista donde el an√°lisis de reglas de asociaci√≥n pueda ser √∫til (por ejemplo, en banca, educaci√≥n o salud).

::: callout-tip
üí° Suba su documento con las respuestas a la plataforma Intu, en la actividad correspondiente a la Semana 12 ‚Äî Reglas de Asociaci√≥n.
:::






